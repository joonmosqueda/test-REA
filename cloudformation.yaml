---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS testREA Stack

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair Name
  VPC: 
    Type: AWS::EC2::VPC::Id
    Description: "VPC Id"
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "Ec2 subnets"
  InstanceProfile: 
    Type: String
    Description: IAM Instance role having access to cloudwatch and s3
  InstanceType:
    Type: String
    Default: t2.micro
    Description: "EC2 Instance Type"
  InstanceMinSize:
    Type: String
    Default: "0"
    Description: "EC2 Minimum Instances"
  InstanceMaxSize:
    Type: String
    Default: "3"
    Description: "EC2 Maximum Instances"
  InstanceDesiredCapacity:
    Type: String
    Default: "2"
    Description: "EC2 Desired Instances"   
  InternalCertificateId:
    Type: String 
    Description: ARN of the IAM server certificate to use with the ELB.
  AMI:
    Type: String
    Description: "AMI ID"
  InternalNetwork:
    Type: String
    Description: "Network CIDR"
  ExternalNetwork:
    Type: String
    Description: "Network CIDR"
  GitRepo:
    Type: String
    Description: Git Repo of App
  GitBranch:
    Type: String
    Description: Git Branch of App
  HostDnsSuffix:
    Type: String
    Description: DNX Suffix
  ZoneId: "Z1ABC2DE3FGHI"
    Type: String
    Description: AWS Zone ID
  Route53Profile:
    Type: String
    Description: IAM Route53 role

Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for elb
      SecurityGroupIngress:
      - 
        CidrIp: !Ref ExternalNetwork
        FromPort: '443'
        ToPort: '443'
        IpProtocol: "tcp"
      VpcId: !Ref VPC

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ec2
      SecurityGroupIngress:
      - 
        IpProtocol: "tcp"
        FromPort: '9292'
        ToPort: '9292'
        SourceSecurityGroupId: !Ref ELBSecurityGroup
      - 
        CidrIp: !Ref InternalNetwork
        FromPort: '22'
        ToPort: '22'
        IpProtocol: "tcp"        
      VpcId: !Ref VPC
    DependsOn: ELBSecurityGroup

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref AMI
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
      - !Ref EC2SecurityGroup
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -ex
          exec >> /var/log/user-data.log
          exec 2>&1
          yum update -y
          
          echo "Configure AWS CloudWatch Logging"
          yum install -y awslogs
          cat <<EOF >>/etc/awslogs/config/cw_agent.conf
          [/var/log/user-data.log]
          file = /var/log/user-data.log
          log_group_name = TestRea
          log_stream_name = {instance_id}
          datetime_format = %b %d %H:%M:%S
          EOF
          sed -i 's/us-east-1/ap-southeast-2/g' /etc/awslogs/awscli.conf
          systemctl restart awslogsd
          systemctl enable awslogsd.service

          echo "Deploying Sinatra App"
          yum install -y git rubygems
          gem install bundler
          AppFolder=/REA/simple-sinatra-app
          git clone --single-branch -b ${GitBranch} ${GitRepo} $AppFolder
          cd $AppFolder
          bundle install
          bundle exec rackup -o 0.0.0.0 -p 9292
  
  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
      - !Ref ELBSecurityGroup
      Subnets: !Ref Subnets
      Scheme: internet-facing
      Listeners:
      - InstancePort: 9292
        InstanceProtocol: HTTP
        LoadBalancerPort: 443
        Protocol: HTTPS
        SSLCertificateId: !Ref InternalCertificateId
      HealthCheck:
        Target: "HTTP:9292/"
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '20'
        Timeout: '15'

  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref InstanceMinSize
      MaxSize: !Ref InstanceMaxSize
      DesiredCapacity: !Ref InstanceDesiredCapacity
      HealthCheckType: "ELB"
      HealthCheckGracePeriod: '240'
      LoadBalancerNames:
      - !Ref ELB

Outputs:
  LoadBalancerDNSName:
    Description: The DNSName of the load balancer
    Value: !GetAtt ELB.DNSName